AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template will create IAM admin users, along with groups and policies.
  This is the only stack that should be created by the root account user!.
  The groups each have different IAM policies associated with them
  This example also creates an AWSAccessKeyId/AWSSecretKey pair associated with the user
  Note that you will need to specify the CAPABILITY_IAM flag
  when you create the stack to allow this template to execute. You can do this through
  the AWS management console by clicking on the check box acknowledging that you understand
  this template creates IAM resources or by specifying the CAPABILITY_IAM flag to
  the cfn-create-stack command line tool
   Last Modified: 10.12.2018
   Author: Exec <aerioeus@gmail.com>
Mappings: {}
Conditions: {}

Metadata:
  ParameterLabels:
    AdministratorAccountId:
      default: Id of the account administrator
    EnvironmentName:
      default: Global parameter that indicates the deployment environment that the stack will deploy
    Owner:
      default: Team or Individual Owner
    Project:
      default: Name of the current project

Parameters:
  Owner:
    Description: Enter Team or Individual Name Responsible for the Stack
    Type: String
    Default: Andreas Rose

  Project:
    Description: The project name
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /energicos/PROJECT_ASA

  Subproject:
    Description: Enter Project Name.
    Type: String
    Default: none

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /energicos/ENVIRONMENT_NAME

Resources:
  # admin policies
  # Allows Full EC2 Access Within a Specific Region, Programmatically and in the Console
  AdministratorPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'This policy grants admin permissions to a User Group for a region'
      Path: "/"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - "*"

  # declaring IAM User Resources
  Administrator1:
    Type: AWS::IAM::User
    Properties:
      UserName: Admin1
      Path: "/"
      LoginProfile:
        Password: "jsD$[}HLLKh12J$%"

  # declaring IAM Access Key Resources
  AdminAccessKey1:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref "Administrator1"

  # create IAM groups
  AdminGroup1:
    Type: AWS::IAM::Group
    Properties:
      Path: "/"
      GroupName: !Sub ${Project}-AdminGroup
      ManagedPolicyArns:
        - !Ref AdministratorPolicy

  # adds users to a group
  AdminAddToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref "AdminGroup1"
      Users:
        - !Ref "Administrator1"

Outputs:
  StackNameUserGroups:
    Description: The Name of the Stack
    Value: !Ref AWS::StackName

  AdminAccessKey:
    Description: AWSAccessKeyId of new user Administrator
    Value: !Ref "AdminAccessKey1"
    Export:
      Name: !Sub ${Project}-AdminAccessKey

  AdminSecretKey:
    Description: AWSSecretKey of new user Administrator
    Value: !GetAtt AdminAccessKey1.SecretAccessKey
    Export:
      Name: !Sub ${Project}-AdminSecretKey